# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # # 환경별 yml 파일 생성(1) - application.yml
      # - name: make application.yml
      #   if: |
      #     contains(github.ref, 'master') ||
      #     contains(github.ref, 'develop')
      #   run: |
      #     mkdir ./src/main/resources # resources 폴더 생성
      #     cd ./src/main/resources # resources 폴더로 이동
      #     touch ./application.yml # application.yml 생성
      #     echo "${{ secrets.YML }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
      #   shell: bash

      # # 환경별 yml 파일 생성(2) - dev
      # - name: make application-dev.yml
      #   if: contains(github.ref, 'develop')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-dev.yml
      #     echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      #   shell: bash

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to hub
      - name: Docker build & push to hub
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/gyunpang-gateway .
          docker push ${{ secrets.DOCKER_USERNAME }}/gyunpang-gateway

      # send docker-compose.yml
      - name: Send docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          source: "./docker-compose.yml"
          target: "/home/ubuntu/"

      # deploy.sh 파일 서버로 전달하기(복사 후 붙여넣기)
      - name: Send deploy.sh
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          source: "./deploy.sh"
          target: "/home/ubuntu/"

      ## deploy to develop
      - name: Deploy docker
        uses: appleboy/ssh-action@master
        id: deploy-docker
        if: contains(github.ref, 'master')
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gyunpang-gateway
            chmod 777 ./deploy.sh
            ./deploy.sh
            sudo docker image prune -f 
